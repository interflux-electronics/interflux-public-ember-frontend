---
name: Continuous Deployment

on:
  push:
    branches:
      - 'production'

concurrency:
  group: ci-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn test

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    env:
      PRIVATE_KEY: ${{secrets.PRIVATE_KEY}}
      URL: bot@server.interflux.com
      ROOT: /var/www/interflux.com
    steps:
      - uses: actions/checkout@v2

      # Create directory for SSH
      - run: mkdir ~/.ssh

      # Add the private key of the restricted bot user on the remote server
      - run: 'echo "$PRIVATE_KEY" > ~/.ssh/$URL'

      # Configure SSH to always use the custom key, so we don't have to do ssh -i
      - run: 'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'

      # Add the remote server to trusted hosts
      - run: ssh-keyscan -H server.interflux.com > ~/.ssh/known_hosts

      # Set all SSH file permissions
      - run: chmod 0755 ~/.ssh/; chmod 600 ~/.ssh/$URL; chmod 644 ~/.ssh/known_hosts

      # First, check out the latest production branch on the remote.
      - run: ssh $URL "cd $ROOT; git checkout production; git pull"

      # Install Node and dependencies
      - run: ssh $URL "cd $ROOT; nvm install; yarn install"

      # Build Ember app, once built Fastboot restarts
      - run: ssh $URL "cd $ROOT; yarn build"
      # # For sanity checking the deploy we'll need pup to pull in interpet the live HTML
      # - run: sudo apt-get install pup
      #
      # # The Git revision of this build
      # - run: echo "BUILD_REVISION=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      #
      # # The Git revision currently live and served by Ember Fastboot
      # - run: echo "LIVE_REVISION=$(curl 'https://new.interflux.com/en/product/IF-2005M' | pup 'meta[name="git-revision"] attr{content}')"
      #
      # # Fail the work flow, something is wrong.
      # - name: 'Sanity check: FAIL'
      #   run: exit -1
      #   if: env.BUILD_REVISION != env.LIVE_REVISION
      #
      # # All green, deploy was successful!
      # - name: 'Sanity check: PASS'
      #   if: env.BUILD_REVISION == env.LIVE_REVISION
      #   run: exit 0

  deploy-de:
    name: Deploy interflux.de (Frankfurt)
    runs-on: ubuntu-latest
    needs: test
    env:
      SSH: ${{secrets.SSH_FRANKFURT}}
      URL: admin@frankfurt.server.interflux.com
      ROOT: /var/www/interflux.de
    steps:
      - uses: actions/checkout@v2
      - run: mkdir ~/.ssh
      - run: 'echo "$SSH" > ~/.ssh/$URL'
      - run: 'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'
      - run: ssh-keyscan -H server.interflux.com > ~/.ssh/known_hosts
      - run: chmod 0755 ~/.ssh/; chmod 600 ~/.ssh/$URL; chmod 644 ~/.ssh/known_hosts
      - run: ssh $URL "cd $ROOT; git checkout production; git pull"
      - run: ssh $URL "cd $ROOT; nvm install; yarn install"
      - run: ssh $URL "cd $ROOT; yarn build"

  deploy-es:
    name: Deploy interflux.es (Madrid)
    runs-on: ubuntu-latest
    needs: test
    env:
      SSH: ${{secrets.SSH_MADRID}}
      URL: admin@madrid.server.interflux.com
      ROOT: /var/www/interflux.es
    steps:
      - uses: actions/checkout@v2
      - run: mkdir ~/.ssh
      - run: 'echo "$SSH" > ~/.ssh/$URL'
      - run: 'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'
      - run: ssh-keyscan -H server.interflux.com > ~/.ssh/known_hosts
      - run: chmod 0755 ~/.ssh/; chmod 600 ~/.ssh/$URL; chmod 644 ~/.ssh/known_hosts
      - run: ssh $URL "cd $ROOT; git checkout production; git pull"
      - run: ssh $URL "cd $ROOT; nvm install; yarn install"
      - run: ssh $URL "cd $ROOT; yarn build"

  # deploy-fr:
  #   name: Deploy interflux.fr (Paris)
  #   runs-on: ubuntu-latest
  #   needs: test
  #   env:
  #     SSH: ${{secrets.SSH_PARIS}}
  #     URL: admin@interflux.fr
  #     ROOT: /var/www/interflux.fr
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: mkdir ~/.ssh
  #     - run: 'echo "$SSH" > ~/.ssh/$URL'
  #     - run: 'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'
  #     - run: ssh-keyscan -H server.interflux.com > ~/.ssh/known_hosts
  #     - run: chmod 0755 ~/.ssh/; chmod 600 ~/.ssh/$URL; chmod 644 ~/.ssh/known_hosts
  #     - run: ssh $URL "cd $ROOT; git checkout production; git pull"
  #     - run: ssh $URL "cd $ROOT; nvm install; yarn install"
  #     - run: ssh $URL "cd $ROOT; yarn build"

  # TODO:
  # deploy-de:
  #   name: Deploy interflux.fr
  #   runs-on: ubuntu-latest
  #   needs: test
  #   env:
  #     DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: >-
  #         curl -X POST -d {"project": "interflux.com"} -H "Authorization: token $DEPLOY_KEY" https://interflux.com/deploy
  #     - run: >-
  #         curl -X POST -d {"project": "interflux.de"} -H "Authorization: token $DEPLOY_KEY" https://interflux.de/deploy
  #     - run: >-
  #         curl -X POST -d {"project": "interflux.es"} -H "Authorization: token $DEPLOY_KEY" https://interflux.de/deploy
  #     - run: >-
  #         curl -X POST -d {"project": "interflux.fr"} -H "Authorization: token $DEPLOY_KEY" https://interflux.de/deploy
